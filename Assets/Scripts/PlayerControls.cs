//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Menu"",
            ""id"": ""258ffb63-0c99-4330-b25f-7df3fe51578d"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""c792aa09-ca41-4e1d-87dd-f4ff3b8c59fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd73c0de-dbcf-48f6-8f5c-12408bf380ac"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""gameplay"",
            ""id"": ""73d6ba2b-0353-4cd2-af27-bacce436f354"",
            ""actions"": [
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""533d2f34-f939-486a-9243-d4551bf1e9e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""4dddfbe8-5dc5-44f2-a725-d7b8b61e8031"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""9016d708-bb12-47c9-8ee9-c94cbc846036"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""9bd7998f-6eea-4378-83a7-5c232a62d9d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldPiece"",
                    ""type"": ""Button"",
                    ""id"": ""e1228e8f-e9ad-4603-97eb-2d77aa29a2f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HardDrop"",
                    ""type"": ""Button"",
                    ""id"": ""0ca0708d-54d2-4af8-a054-d7dcfff001b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FastDrop"",
                    ""type"": ""Button"",
                    ""id"": ""c0abcc6a-4b18-47a4-a864-84b2a3d145a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ecdd7f5e-478b-42b5-ac5e-446ba255b452"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldRight"",
                    ""type"": ""Button"",
                    ""id"": ""ce991c52-0ce4-4c93-9fb8-2f4b0f80139d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1a9d8884-8037-4bcc-ba15-f492727d70cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""810195b4-b09e-49fa-a4ed-8f8a48263e10"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77f5efeb-5fb9-4c0f-9042-a23e291c9fc0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a93057ae-f52e-40a2-94ba-153e14574b64"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e9e46eb-1628-4438-bd4f-db5105055f58"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HoldPiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""613487f5-8584-4cce-838d-0346eef181b3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HardDrop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d5fe480-6691-4d1a-8fa3-60befc3d7e19"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""FastDrop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc4a4f3c-b028-4ceb-98cc-9f71d890f0f1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HoldLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e5c7abd-a958-4d3d-a8da-1fd48212510a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Start = m_Menu.FindAction("Start", throwIfNotFound: true);
        // gameplay
        m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
        m_gameplay_RotateLeft = m_gameplay.FindAction("RotateLeft", throwIfNotFound: true);
        m_gameplay_RotateRight = m_gameplay.FindAction("RotateRight", throwIfNotFound: true);
        m_gameplay_MoveLeft = m_gameplay.FindAction("MoveLeft", throwIfNotFound: true);
        m_gameplay_MoveRight = m_gameplay.FindAction("MoveRight", throwIfNotFound: true);
        m_gameplay_HoldPiece = m_gameplay.FindAction("HoldPiece", throwIfNotFound: true);
        m_gameplay_HardDrop = m_gameplay.FindAction("HardDrop", throwIfNotFound: true);
        m_gameplay_FastDrop = m_gameplay.FindAction("FastDrop", throwIfNotFound: true);
        m_gameplay_HoldLeft = m_gameplay.FindAction("HoldLeft", throwIfNotFound: true);
        m_gameplay_HoldRight = m_gameplay.FindAction("HoldRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Start;
    public struct MenuActions
    {
        private @PlayerControls m_Wrapper;
        public MenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_Menu_Start;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnStart;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // gameplay
    private readonly InputActionMap m_gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_gameplay_RotateLeft;
    private readonly InputAction m_gameplay_RotateRight;
    private readonly InputAction m_gameplay_MoveLeft;
    private readonly InputAction m_gameplay_MoveRight;
    private readonly InputAction m_gameplay_HoldPiece;
    private readonly InputAction m_gameplay_HardDrop;
    private readonly InputAction m_gameplay_FastDrop;
    private readonly InputAction m_gameplay_HoldLeft;
    private readonly InputAction m_gameplay_HoldRight;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateLeft => m_Wrapper.m_gameplay_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_gameplay_RotateRight;
        public InputAction @MoveLeft => m_Wrapper.m_gameplay_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_gameplay_MoveRight;
        public InputAction @HoldPiece => m_Wrapper.m_gameplay_HoldPiece;
        public InputAction @HardDrop => m_Wrapper.m_gameplay_HardDrop;
        public InputAction @FastDrop => m_Wrapper.m_gameplay_FastDrop;
        public InputAction @HoldLeft => m_Wrapper.m_gameplay_HoldLeft;
        public InputAction @HoldRight => m_Wrapper.m_gameplay_HoldRight;
        public InputActionMap Get() { return m_Wrapper.m_gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @RotateLeft.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateLeft;
                @RotateRight.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateRight;
                @RotateRight.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateRight;
                @RotateRight.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateRight;
                @MoveLeft.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveLeft;
                @MoveRight.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveRight;
                @MoveRight.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveRight;
                @MoveRight.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveRight;
                @HoldPiece.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHoldPiece;
                @HoldPiece.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHoldPiece;
                @HoldPiece.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHoldPiece;
                @HardDrop.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHardDrop;
                @HardDrop.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHardDrop;
                @HardDrop.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHardDrop;
                @FastDrop.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnFastDrop;
                @FastDrop.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnFastDrop;
                @FastDrop.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnFastDrop;
                @HoldLeft.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHoldLeft;
                @HoldLeft.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHoldLeft;
                @HoldLeft.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHoldLeft;
                @HoldRight.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHoldRight;
                @HoldRight.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHoldRight;
                @HoldRight.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHoldRight;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateLeft.started += instance.OnRotateLeft;
                @RotateLeft.performed += instance.OnRotateLeft;
                @RotateLeft.canceled += instance.OnRotateLeft;
                @RotateRight.started += instance.OnRotateRight;
                @RotateRight.performed += instance.OnRotateRight;
                @RotateRight.canceled += instance.OnRotateRight;
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
                @HoldPiece.started += instance.OnHoldPiece;
                @HoldPiece.performed += instance.OnHoldPiece;
                @HoldPiece.canceled += instance.OnHoldPiece;
                @HardDrop.started += instance.OnHardDrop;
                @HardDrop.performed += instance.OnHardDrop;
                @HardDrop.canceled += instance.OnHardDrop;
                @FastDrop.started += instance.OnFastDrop;
                @FastDrop.performed += instance.OnFastDrop;
                @FastDrop.canceled += instance.OnFastDrop;
                @HoldLeft.started += instance.OnHoldLeft;
                @HoldLeft.performed += instance.OnHoldLeft;
                @HoldLeft.canceled += instance.OnHoldLeft;
                @HoldRight.started += instance.OnHoldRight;
                @HoldRight.performed += instance.OnHoldRight;
                @HoldRight.canceled += instance.OnHoldRight;
            }
        }
    }
    public GameplayActions @gameplay => new GameplayActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IMenuActions
    {
        void OnStart(InputAction.CallbackContext context);
    }
    public interface IGameplayActions
    {
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnHoldPiece(InputAction.CallbackContext context);
        void OnHardDrop(InputAction.CallbackContext context);
        void OnFastDrop(InputAction.CallbackContext context);
        void OnHoldLeft(InputAction.CallbackContext context);
        void OnHoldRight(InputAction.CallbackContext context);
    }
}
